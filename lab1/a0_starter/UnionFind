import java.util.*;

class UnionFind{

    private HashMap<Integer, int[]> graph= null;

    public  UnionFind(){
        graph = new HashMap<Integer, int[]>();
    }

    public int parent(int n){
        return graph.get(n)[0];
    }

    public int rank(int n){
        return graph.get(n)[1];
    }

    public void setParent(int n, int p){
        if(p != -1){
            graph.get(n)[0] = p;
        }
    }

    public void setRank(int n, int p){
        graph.get(n)[1] = r;
    }

    public int find(int n){
        while(parent(n) != -1){
            setParent(n, parent(parent(n)));
            n = parent(n)
        }
        return n;
    }

    public void union(int i, int j){
        if(!graph.containsKey(i)){
            graph.put(i, new int[] {0, -1});
        }

        if(!graph.containsKey(j)){
            graph.put(j, new int[] {0, -1});
        }

        int root_i = find(i);
        int root_j = find(j);

        if(root_i != root_j){
            if(rank(root_i) == rank(root_j)) {
                setParent((root_i, root_j));
                setRank(root_i, rank(root_i) + 1);
            }else if(rank(root_i) > rank(root_j)){
                setParent(root_j, root_i);
            }else{
                setParent(root_i, root_j);
            }
        }
    }

}